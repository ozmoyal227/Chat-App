<!-- ================================================================
This page is our Chat UI ,
a view for main layout 
================================================================ --><div class="container-fluid h-100">
  <div class="row h-100">
    <!-- user panel -->
    <div class="col-3 bg-info h-100 px-3 rounded" id="user-panel">
      <div class="card-box d-flex flex-column h-100 text-center py-3">
        <section>
          <div class="user-pic mx-auto my-4">
            <img
              src="/images/user.svg"
              class="img-fluid bg-secondary rounded-circle"
              alt="User Pic"
            />
          </div>
          <!-- user name -->
          <h4 class="m-0 border border-dark p-1 bg-light mx-5 rounded-pill">
            <% if (locals.user) { %> <%= user.name %> <% } %>
          </h4>
        </section>
        <hr class="my-3 text-white" />
        <h5 class="px-1 py-1 border border-dark bg-light rounded-pill align-self-start">
          My files:
        </h5>
        <section class="flex-grow-1 overflow-hidden">
          <!-- user files -->
          <ul
            id="userFiles"
            class="list-group list-group-flush overflow-auto h-100 rounded">
          </ul>
        </section>
      </div>
    </div>

    <!-- chat -->
    <div class="p-0 col-9 h-100 rounded" id="chat-bg">
      <div class="d-flex flex-column h-100">
        <!-- Messages -->
        <div id="chat-content" class="overflow-auto d-flex flex-column flex-grow-1 p-3">
          <% for (var i = 0; i < lobby.messages?.length ?? 0; i++) { %>
          <!-- adding separator between messages from different days-->
          <% if (!lobby.messages[i-1] ||
          !moment(lobby.messages[i].sentAt).isSame(lobby.messages[i-1].sentAt,'day')) { %>
          <div class="media media-meta-day text-center border-bottom border-top my-3 text-white">
            <%= moment(lobby.messages[i].sentAt).format("MMM D") %> - 
            <%= moment(lobby.messages[i].sentAt).fromNow() %>
          </div>
          <% } %>
           <!--messages side is determined by the sender  -->
          <% if (lobby.messages[i].senderId !== user.id) { %>
            <div class="media media-chat d-flex media-chat-reverse text-end flex-row-reverse align-self-end mb-2">
          <% } else { %>
            <div class="media media-chat d-flex align-self-start mb-3">
          <% } %>
              <img
                class="avatar align-self-start"
                src="https://img.icons8.com/color/36/000000/administrator-male.png"
                alt="..."
              />
              <div class="card p-2 media-body flex-grow-1">
                <!-- sender name -->
                <p class="mb-0">
                  <strong><%= lobby.messages[i].senderName %></strong>
                </p>
                <!-- message text -->
                <p class="mb-0"><%= lobby.messages[i].text %></p>
                <!-- checking if message contains file -->
                <% if (lobby.messages[i].file?.name){ %>
                <div class="file card border border-dark">
                  <!--checking if the file have an image preview -->
                  <% if (lobby.messages[i].file?.type &&
                  isSupportedPreviewType(lobby.messages[i].file.type)){ %>
                  <img
                    class="img-fluid p-2"
                    src="data:<%= lobby.messages[i].file.type %>;base64, <%= lobby.messages[i].file.data %>"
                  />
                  <% } %>
                  <div class="card-body text-center">
                    <!-- file name -->
                    <h5 class="card-title">
                      <%= lobby.messages[i].file.name %>
                    </h5>
                    <a
                      class="btn btn-success"
                      download="<%= lobby.messages[i].file.name %>"
                      href="data:<%= lobby.messages[i].file.type %>;base64, <%= lobby.messages[i].file.data %>"
                      title="download file" 
                    >
                      <i class="bi bi-file-earmark-arrow-down"></i>
                    </a>
                    <button
                      id="addFileToUserBtn"
                      class="btn btn-primary"
                      onclick="onAddFileToUser('<%= JSON.stringify(lobby.messages[i].file) %>')"
                      title="add to favorites"
                    >
                      <i class="bi bi-file-earmark-plus"></i>
                    </button>
                  </div>
                </div>
                <% } %>
                <!--adding message time -->
                <p class="meta m-0">
                  <span>
                    <%= moment(lobby.messages[i].sentAt).format("hh:mm A") %>
                  </span>
                </p>
              </div>
            </div>
          <% } %>
          </div>

          <!-- add Message, using add-message view -->
          <%- include('./partials/add-message.ejs', { user:user, chatId:lobby.id}) %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  //initialize socket
  const socket = io();
  const chatId = "<%= lobby?.id %>";
  const userId = "<%= user?.id %>";
  //function for loading visualization  
  const Loader = () =>
    `<div class="text-center">
      <div class="spinner-border text-light" role="status"></div>
    </div>`;

  //function for connection event   
  const onConnect = () => {
    console.log("User connected...");
    socket.emit("chat:join", chatId);
  };
  //function for adding message event   
  const onAddMessage = (message) => {
    //creating message 
    const newMessage = createNewMessage(
      message.senderId,
      message.senderName,
      message.text,
      message.sentAt,
      message.file
    );
    //adding message to chat
    $("#chat-content").append(newMessage);
    //scroll to bottom of chat
    $("#chat-content").animate({ scrollTop: $("#chat-content").prop("scrollHeight")},500);
  };

  //function to create new message format, compatible with format above
  const createNewMessage = (senderId, senderName, text, sentAt, file) => {
    return `
        <div class="mb-3 media media-chat d-flex ${senderId === userId ?
          "align-self-start"
          : "align-self-end flex-row-reverse text-end"}"
        >
          <img class="avatar align-self-start" src="https://img.icons8.com/color/36/000000/administrator-male.png" alt="...">
          <div class="card p-2 media-body flex-grow-1">
            <p class="mb-0">
              <strong>${senderName}</strong>
            </p>
            <p class="mb-0">${text}</p>
            ${!file?.name ?
                ""
                : `<div class="file card border border-dark">
                    ${file?.type && isSupportedPreviewType(file.type) ? 
                      `<img class="img-fluid p-2" src="data:${file.type};base64, ${file.data}" />`
                      : ""
                    }
                    <div class="card-body text-center">
                      <h5 class="card-title">${file.name}</h5>
                      <a 
                        class="btn btn-success" 
                        download="${file.name}" 
                        href="data:${file.type};base64, ${file.data}"
                        title="download file"
                      >
                        <i class="bi bi-file-earmark-arrow-down"></i>
                      </a>

                      <button
                        class="btn btn-primary"
                        onclick='onAddFileToUser(${JSON.stringify(JSON.stringify(file))})'
                        title="add to favorites"
                      >
                        <i class="bi bi-file-earmark-plus"></i>
                      </button>
                    </div>
                  </div>`
            }

            <p class="meta m-0">
              <span>${moment(sentAt).format("hh:mm A")}</span>
            </p>
          </div>
        </div>`;
  };

  //function that get file and returning if he supporting preview
  const isSupportedPreviewType = (type) => {
    const supportedTypes = [
      "image/png",
      "image/jpeg",
      "image/jpg",
      "image/svg+xml",
    ];
    return !!supportedTypes.find((t) => type === t);
  };

  //function for adding file to favorites event
  const onAddFileToUser = async (file) => {
    //send request to add file and getting response
    const addFileRes = await request("POST", "/users/files", JSON.parse(file));
    //checking if the response was successful
    if (!addFileRes || !addFileRes.ok) {
      alert("Error adding file to user");
      return;
    }

    //if file added successfully, calling refresh file list function
    refreshUserFiles();
  };

  //function to remove file from favorites event
  const onRemoveFileFromUser = async (fileId) => {
    //send request to remove file and getting response
    const removeFileResp = await request("DELETE", `/users/files/${fileId}`);
    //checking if the response was successful
    if (!removeFileResp || !removeFileResp.ok) {
      alert("Error removing file from user");
      return;
    }

    //if file removed successfully, refresh files list 
    refreshUserFiles();
  };

  //function te refresh user files list
  const refreshUserFiles = async () => {
    //first clear the list then animate loading
    $("#userFiles").empty();
    $("#userFiles").append(Loader);
    //send request to get user files and getting response
    const getUserFilesResp = await request("GET", "/users/files");

    //checking if the response was successful
    if (!getUserFilesResp?.data || !getUserFilesResp?.success) {
      $("#userFiles").empty();
      alert("Error reloading user files");
      return;
    }

    //creating new updated files list
    const userFilesList = createNewUserFilesList(getUserFilesResp?.data);

    //clear files list and add the new file list
    $("#userFiles").empty();
    $("#userFiles").append(userFilesList);
  };

  //function to create new files list format
  const createNewUserFilesList = (files) => {
    return (files?.map((file) => {
      return `
      <li
        class="list-group-item d-flex justify-content-between align-items-center"
      >
        <h6 id="file-name" class="mb-0">${file.name}</h6>
        <div>
          <a
            class="btn btn-success"
            download="${file.name}"
            href="data:${file.type};base64, ${file.data}"
            title="download file"
          >
            <i class="bi bi-file-earmark-arrow-down"></i>
          </a>
          <button
            id="removeFileFromUserBtn"
            class="btn btn-danger"
            onclick='onRemoveFileFromUser(${JSON.stringify(file.id)})'
          >
            <i class="bi bi-file-earmark-minus"></i>
          </button>
        </div>
      </li>
      `;
      }) ?? ""
    );
  };

  //function for every page load, refresh files and scroll chat to bottom
  const onPageLoad = async () => {
    await refreshUserFiles();
    $("#chat-content").animate(
      { scrollTop: $("#chat-content").prop("scrollHeight") },
      0
    );
  };

  //socket waiting for events
  socket.on("connect", onConnect);
  socket.on("message:add", onAddMessage);

  //adding event for enter press when sending message
  $("#add-msg").on("keyup", (event) => {
    if (event.keyCode === 13) {
      event.preventDefault();
      $("#sendButton").click();
    }
  });

  //
  setTimeout(() => {
    onPageLoad();
  });
</script>
